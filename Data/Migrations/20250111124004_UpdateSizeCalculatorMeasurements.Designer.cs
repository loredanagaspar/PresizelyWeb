// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PresizelyWeb.Data;

#nullable disable

namespace PresizelyWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250111124004_UpdateSizeCalculatorMeasurements")]
    partial class UpdateSizeCalculatorMeasurements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PresizelyWeb.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PresizelyWeb.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "T-Shirts"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Trousers"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jackets"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sweaters"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Hoodies"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Shorts"
                        });
                });

            modelBuilder.Entity("PresizelyWeb.Data.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("PresizelyWeb.Data.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("PresizelyWeb.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTop")
                        .HasColumnType("bit");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeChartJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Color = "Blue",
                            Description = "Relaxed fit T-shirt. Round neck and short sleeves.",
                            ImageUrl = "/lib/images/nproduct/T-Shirt1.png",
                            IsTop = true,
                            Material = "Cotton",
                            Name = "STRIPED T-SHIRT",
                            Price = 12.99m,
                            Size = "S,M,L,XL",
                            SizeChartJson = "{\r\n                \"S\": { \"ChestMin\": 80, \"ChestMax\": 90, \"WaistMin\": 70, \"WaistMax\": 75, \"SleeveLengthMin\": 50, \"SleeveLengthMax\": 55 },\r\n                \"M\": { \"ChestMin\": 91, \"ChestMax\": 96, \"WaistMin\": 76, \"WaistMax\": 81, \"SleeveLengthMin\": 55, \"SleeveLengthMax\": 60 },\r\n                \"L\": { \"ChestMin\": 97, \"ChestMax\": 102, \"WaistMin\": 82, \"WaistMax\": 87, \"SleeveLengthMin\": 60, \"SleeveLengthMax\": 65 },\r\n                \"XL\": { \"ChestMin\": 103, \"ChestMax\": 110, \"WaistMin\": 88, \"WaistMax\": 95, \"SleeveLengthMin\": 65, \"SleeveLengthMax\": 70 }\r\n            }",
                            SpecialTag = "Casual Wear",
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Color = "Lime",
                            Description = "Relaxed fit T-shirt with tone-on-tone embroidered detail.",
                            ImageUrl = "/lib/images/nproduct/T-Shirt2.png",
                            IsTop = true,
                            Material = "Cotton",
                            Name = "RELAXED T-SHIRT",
                            Price = 15.99m,
                            Size = "S,M,L,XL",
                            SizeChartJson = "{\r\n                \"S\": { \"ChestMin\": 80, \"ChestMax\": 90, \"WaistMin\": 70, \"WaistMax\": 75, \"SleeveLengthMin\": 50, \"SleeveLengthMax\": 55 },\r\n                \"M\": { \"ChestMin\": 91, \"ChestMax\": 96, \"WaistMin\": 76, \"WaistMax\": 81, \"SleeveLengthMin\": 55, \"SleeveLengthMax\": 60 },\r\n                \"L\": { \"ChestMin\": 97, \"ChestMax\": 102, \"WaistMin\": 82, \"WaistMax\": 87, \"SleeveLengthMin\": 60, \"SleeveLengthMax\": 65 },\r\n                \"XL\": { \"ChestMin\": 103, \"ChestMax\": 110, \"WaistMin\": 88, \"WaistMax\": 95, \"SleeveLengthMin\": 65, \"SleeveLengthMax\": 70 }\r\n            }",
                            SpecialTag = "Trendy",
                            Stock = 40
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Color = "Blue",
                            Description = "Perfect for office and formal events.",
                            ImageUrl = "/lib/images/nproduct/Shirt2.png",
                            IsTop = true,
                            Material = "Polyester",
                            Name = "FORMAL SHIRT",
                            Price = 29.99m,
                            Size = "S,M,L,XL",
                            SizeChartJson = "{\r\n                \"S\": { \"ChestMin\": 85, \"ChestMax\": 95, \"WaistMin\": 70, \"WaistMax\": 75, \"SleeveLengthMin\": 52, \"SleeveLengthMax\": 57 },\r\n                \"M\": { \"ChestMin\": 96, \"ChestMax\": 105, \"WaistMin\": 76, \"WaistMax\": 81, \"SleeveLengthMin\": 57, \"SleeveLengthMax\": 62 },\r\n                \"L\": { \"ChestMin\": 106, \"ChestMax\": 115, \"WaistMin\": 82, \"WaistMax\": 87, \"SleeveLengthMin\": 62, \"SleeveLengthMax\": 67 },\r\n                \"XL\": { \"ChestMin\": 116, \"ChestMax\": 125, \"WaistMin\": 88, \"WaistMax\": 95, \"SleeveLengthMin\": 67, \"SleeveLengthMax\": 72 }\r\n            }",
                            SpecialTag = "Formal",
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Color = "Blue",
                            Description = "Classic blue denim jeans.",
                            ImageUrl = "/lib/images/nproduct/Jeans1.png",
                            IsTop = false,
                            Material = "Denim",
                            Name = "BLUE DENIM JEANS",
                            Price = 39.99m,
                            Size = "32,34,36,38",
                            SizeChartJson = "{\r\n                \"32\": { \"WaistMin\": 70, \"WaistMax\": 76, \"HipsMin\": 90, \"HipsMax\": 96, \"InseamMin\": 75, \"InseamMax\": 80 },\r\n                \"34\": { \"WaistMin\": 77, \"WaistMax\": 83, \"HipsMin\": 97, \"HipsMax\": 103, \"InseamMin\": 80, \"InseamMax\": 85 },\r\n                \"36\": { \"WaistMin\": 84, \"WaistMax\": 90, \"HipsMin\": 104, \"HipsMax\": 110, \"InseamMin\": 85, \"InseamMax\": 90 },\r\n                \"38\": { \"WaistMin\": 91, \"WaistMax\": 97, \"HipsMin\": 111, \"HipsMax\": 117, \"InseamMin\": 90, \"InseamMax\": 95 }\r\n            }",
                            SpecialTag = "Everyday Wear",
                            Stock = 60
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Color = "Blue",
                            Description = "Skinny-fit jeans with ripped-effect details.",
                            ImageUrl = "/lib/images/nproduct/Jeans2.png",
                            IsTop = false,
                            Material = "Denim",
                            Name = "RIPPED SKINNY FIT JEANS",
                            Price = 42.99m,
                            Size = "32,34,36,38",
                            SizeChartJson = "{\r\n            \"32\": { \"WaistMin\": 70, \"WaistMax\": 76, \"HipsMin\": 90, \"HipsMax\": 96, \"InseamMin\": 75, \"InseamMax\": 80 },\r\n            \"34\": { \"WaistMin\": 77, \"WaistMax\": 83, \"HipsMin\": 97, \"HipsMax\": 103, \"InseamMin\": 80, \"InseamMax\": 85 },\r\n            \"36\": { \"WaistMin\": 84, \"WaistMax\": 90, \"HipsMin\": 104, \"HipsMax\": 110, \"InseamMin\": 85, \"InseamMax\": 90 },\r\n            \"38\": { \"WaistMin\": 91, \"WaistMax\": 97, \"HipsMin\": 111, \"HipsMax\": 117, \"InseamMin\": 90, \"InseamMax\": 95 }\r\n        }",
                            SpecialTag = "Trendy",
                            Stock = 45
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Color = "Camel",
                            Description = "Wide-fit chino trousers in cotton twill.",
                            ImageUrl = "/lib/images/nproduct/Trousers1.png",
                            IsTop = false,
                            Material = "Cotton",
                            Name = "WIDE FIT CHINO TROUSERS",
                            Price = 34.99m,
                            Size = "32,34,36,38",
                            SizeChartJson = "{\r\n            \"32\": { \"WaistMin\": 76, \"WaistMax\": 81, \"HipsMin\": 91, \"HipsMax\": 96, \"InseamMin\": 75, \"InseamMax\": 80 },\r\n            \"34\": { \"WaistMin\": 82, \"WaistMax\": 87, \"HipsMin\": 97, \"HipsMax\": 102, \"InseamMin\": 80, \"InseamMax\": 85 },\r\n            \"36\": { \"WaistMin\": 88, \"WaistMax\": 93, \"HipsMin\": 103, \"HipsMax\": 108, \"InseamMin\": 85, \"InseamMax\": 90 },\r\n            \"38\": { \"WaistMin\": 94, \"WaistMax\": 99, \"HipsMin\": 109, \"HipsMax\": 114, \"InseamMin\": 90, \"InseamMax\": 95 }\r\n        }",
                            SpecialTag = "Trendy",
                            Stock = 25
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Color = "Vanilla",
                            Description = "Straight-leg chinos with zip fly.",
                            ImageUrl = "/lib/images/nproduct/Trousers2.png",
                            IsTop = false,
                            Material = "Cotton",
                            Name = "STRAIGHT-LEG CHINOS",
                            Price = 49.99m,
                            Size = "32,34,36,38",
                            SizeChartJson = "{\r\n            \"32\": { \"WaistMin\": 76, \"WaistMax\": 81, \"HipsMin\": 91, \"HipsMax\": 96, \"InseamMin\": 75, \"InseamMax\": 80 },\r\n            \"34\": { \"WaistMin\": 82, \"WaistMax\": 87, \"HipsMin\": 97, \"HipsMax\": 102, \"InseamMin\": 80, \"InseamMax\": 85 },\r\n            \"36\": { \"WaistMin\": 88, \"WaistMax\": 93, \"HipsMin\": 103, \"HipsMax\": 108, \"InseamMin\": 85, \"InseamMax\": 90 },\r\n            \"38\": { \"WaistMin\": 94, \"WaistMax\": 99, \"HipsMin\": 109, \"HipsMax\": 114, \"InseamMin\": 90, \"InseamMax\": 95 }\r\n        }",
                            SpecialTag = "Formal",
                            Stock = 20
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Color = "Dark Khaki",
                            Description = "Overshirt with a regular fit and chest patch pocket.",
                            ImageUrl = "/lib/images/nproduct/Jacket1.png",
                            IsTop = true,
                            Material = "Suede",
                            Name = "FAUX SUEDE OVERSHIRT",
                            Price = 99.99m,
                            Size = "S,M,L,XL",
                            SizeChartJson = "{\r\n            \"S\": { \"ChestMin\": 85, \"ChestMax\": 90, \"WaistMin\": 70, \"WaistMax\": 75, \"SleeveLengthMin\": 55, \"SleeveLengthMax\": 60 },\r\n            \"M\": { \"ChestMin\": 91, \"ChestMax\": 96, \"WaistMin\": 76, \"WaistMax\": 81, \"SleeveLengthMin\": 60, \"SleeveLengthMax\": 65 },\r\n            \"L\": { \"ChestMin\": 97, \"ChestMax\": 102, \"WaistMin\": 82, \"WaistMax\": 87, \"SleeveLengthMin\": 65, \"SleeveLengthMax\": 70 },\r\n            \"XL\": { \"ChestMin\": 103, \"ChestMax\": 110, \"WaistMin\": 88, \"WaistMax\": 95, \"SleeveLengthMin\": 70, \"SleeveLengthMax\": 75 }\r\n        }",
                            SpecialTag = "Premium",
                            Stock = 15
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Color = "Khaki",
                            Description = "Lightweight bomber jacket with ribbed trims and zip fastening.",
                            ImageUrl = "/lib/images/nproduct/Jacket2.png",
                            IsTop = true,
                            Material = "Cotton",
                            Name = "TECHNICAL BOMBER JACKET",
                            Price = 50.99m,
                            Size = "S,M,L,XL",
                            SizeChartJson = "{\r\n            \"S\": { \"ChestMin\": 85, \"ChestMax\": 90, \"WaistMin\": 70, \"WaistMax\": 75, \"SleeveLengthMin\": 55, \"SleeveLengthMax\": 60 },\r\n            \"M\": { \"ChestMin\": 91, \"ChestMax\": 96, \"WaistMin\": 76, \"WaistMax\": 81, \"SleeveLengthMin\": 60, \"SleeveLengthMax\": 65 },\r\n            \"L\": { \"ChestMin\": 97, \"ChestMax\": 102, \"WaistMin\": 82, \"WaistMax\": 87, \"SleeveLengthMin\": 65, \"SleeveLengthMax\": 70 },\r\n            \"XL\": { \"ChestMin\": 103, \"ChestMax\": 110, \"WaistMin\": 88, \"WaistMax\": 95, \"SleeveLengthMin\": 70, \"SleeveLengthMax\": 75 }\r\n        }",
                            SpecialTag = "Premium",
                            Stock = 15
                        });
                });

            modelBuilder.Entity("PresizelyWeb.Data.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PresizelyWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PresizelyWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PresizelyWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PresizelyWeb.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PresizelyWeb.Data.OrderDetail", b =>
                {
                    b.HasOne("PresizelyWeb.Data.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PresizelyWeb.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PresizelyWeb.Data.Product", b =>
                {
                    b.HasOne("PresizelyWeb.Data.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PresizelyWeb.Data.ShoppingCart", b =>
                {
                    b.HasOne("PresizelyWeb.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PresizelyWeb.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PresizelyWeb.Data.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
