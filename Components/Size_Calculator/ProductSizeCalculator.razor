@page "/size-calculator/{productId:int}"
@using PresizelyWeb.Data
@using System.Text.Json
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager

<div class="size-calculator-container">
    <div class="size-calculator-card">
        <div class="card-header bg-primary text-white text-center">
            <h4>Size Calculator</h4>
        </div>
        <div class="size-calculator-card-body">
            <div class="size-calculator-content">
                <div>
                    @if (_isProcessing)
                    {
                        <div class="text-center">
                            <p>Calculating size, please wait...</p>
                        </div>
                    }
                    else
                    {
                        @if (_sizeCalculator.IsTop)
                        {
                            <TopSizeForm SizeCalculator="_sizeCalculator" OnSubmit="CalculateSize" />
                        }
                        else
                        {
                            <BottomSizeForm SizeCalculator="_sizeCalculator" OnSubmit="CalculateSize" />
                        }

                        @if (!string.IsNullOrEmpty(_sizeCalculator.RecommendedSize))
                        {
                            <div class="alert alert-success text-center mt-3">
                                <strong>Recommended Size:</strong> @_sizeCalculator.RecommendedSize
                                @if (!string.IsNullOrEmpty(_sizeCalculator.RecommendationMessage))
                                {
                                    <p>@_sizeCalculator.RecommendationMessage</p>
                                }
                            </div>
                        }
                    }
                </div>

                <div class="size-guide-section">
                    <h5 class="text-center mb-3">Product Measurements</h5>
                    <div class="size-guide-wrapper">
                        @if (_sizeChartHeaders.Count > 0 && _sizeChart.Count > 0)
                        {
                            <table class="table table-bordered mt-4">
                                <thead class="table-light" style="font-size: 0.8rem;">
                                    <tr>
                                        @foreach (var header in _sizeChartHeaders)
                                        {
                                            <th>@header</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody style="font-size: 0.8rem;">
                                    @foreach (var row in _sizeChart)
                                    {
                                        <tr>
                                            @foreach (var cell in row)
                                            {
                                                <td>@cell</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-center text-muted">No size guide available for this product.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private SizeCalculator _sizeCalculator = new SizeCalculator();
    private bool _isProcessing = false;
    private bool _isLoading = true;
    private string _errorMessage = string.Empty;
    private Product _product;
    private List<string> _sizeChartHeaders = new List<string>();
    private List<List<string>> _sizeChart = new List<List<string>>();

    [Parameter]
    public int ProductId { get; set; }

    private readonly Dictionary<string, string> _headerMappings = new Dictionary<string, string>
    {
        { "ChestMin", "Chest Min (cm)" },
        { "ChestMax", "Chest Max (cm)" },
        { "WaistMin", "Waist Min (cm)" },
        { "WaistMax", "Waist Max (cm)" },
        { "SleeveLengthMin", "Sleeve Length Min (cm)" },
        { "SleeveLengthMax", "Sleeve Length Max (cm)" },
        { "HipsMin", "Hips Min (cm)" },
        { "HipsMax", "Hips Max (cm)" },
        { "InseamMin", "Inside Leg Min (cm)" },
        { "InseamMax", "Inside Leg (cm)" }
    };

    protected override void OnInitialized()
    {
        // Initialise the SizeCalculator model with default values
        _sizeCalculator = new SizeCalculator
            {
                IsTop = false,
                FitPreference = "Regular", // Default value
            };
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _product = await ProductRepository.GetAsync(ProductId);

            if (_product == null)
            {
                _errorMessage = "Product not found.";
                return;
            }
            _sizeCalculator = new SizeCalculator
                {
                    IsTop = _product.IsTop
                };

            _sizeCalculator.RecommendedSize = string.Empty;
            ParseSizeChart(_product.SizeChartJson);

            StateHasChanged(); 
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while loading the product: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }


    private void ParseSizeChart(string sizeChartJson)
    {
        try
        {
            if (string.IsNullOrEmpty(sizeChartJson))
            {
                _sizeChart = new List<List<string>>();
                return;
            }

            var sizeChart = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, int>>>(sizeChartJson);

            if (sizeChart != null)
            {
                _sizeChartHeaders = new List<string> { "Size" };
                _sizeChartHeaders.AddRange(
                    sizeChart.First().Value.Keys.Select(key => _headerMappings.ContainsKey(key) ? _headerMappings[key] : key)
                );

                _sizeChart = sizeChart.Select(size =>
                    new List<string> { size.Key }
                    .Concat(size.Value.Values.Select(v => v.ToString())).ToList()
                ).ToList();
            }
        }
        catch
        {
            _sizeChart = new List<List<string>>();
        }
    }

    private async Task CalculateSize()
    {

        Console.WriteLine($"[Parent Component] FitPreference: {_sizeCalculator.FitPreference}");
        Console.WriteLine($"[Parent Component] Waist: {_sizeCalculator.BottomsWaist}, Hips: {_sizeCalculator.Hips}, Inseam: {_sizeCalculator.Inseam}");
        try
        {
            _isProcessing = true;
            var product = await ProductRepository.GetAsync(ProductId);

            if (product == null || string.IsNullOrEmpty(product.SizeChartJson))
            {
                _errorMessage = "Size chart not available for this product.";
                return;
            }

            _sizeCalculator.RecommendedSize = _sizeCalculator.MatchSize(product.SizeChartJson);
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred during size calculation: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}
