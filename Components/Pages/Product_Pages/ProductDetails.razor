@page "/products/{id:int}"
@using PresizelyWeb.Data
@using System.Globalization
@using PresizelyWeb.Services
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@inject IShoppingCartRepository _cartRepository
@inject SharedStateService _sharedStateService

<div class="container mt-5">
    @if (IsLoading)
    {
        <div class="text-center">
            <p>Loading product details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger text-center">
            <p>@ErrorMessage</p>
            <button class="btn btn-secondary" @onclick="NavigateBack">Back to Products</button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <img src="@Product.ImageUrl" class="img-fluid rounded" alt="@Product.Name" />
            </div>
            <div class="col-md-6">
                <h2>@Product.Name</h2>
                <p><strong>Description:</strong> @Product.Description</p>
                <p><strong>Color:</strong> @Product.Color</p>
                <p><strong>Material:</strong> @Product.Material</p>
                <h4 class="text-danger">@Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-GB"))</h4>

                <div class="mt-4">
                    <label for="sizeDropdown" class="form-label">Available Sizes:</label>
                    <select id="sizeDropdown" class="form-select w-auto" @bind="SelectedSize">
                        <option value="" disabled selected>Select a size</option>
                        @foreach (var size in Product.Size.Split(','))
                        {
                            <option value="@size">@size</option>
                        }
                    </select>
                </div>

                <div class="mt-4">
                    <a class="btn btn-info me-2" href="/size-calculator/@Product.Id">
                        <i class="bi bi-calculator"></i> Size Calculator
                    </a>
                    <a class="btn btn-secondary" href="/size-guide/@Product.Id">
                        <i class="bi bi-table"></i> Size Guide
                    </a>
                </div>

                <button class="btn btn-success mt-3 px-5" @onclick="()=>AddOrderItem(Product, SelectedSize)">
                    <i class="bi bi-cart3"></i> Add to Cart
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product Product;
    private bool IsLoading = true;
    private string ErrorMessage;
    private string SelectedSize;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Product = await ProductRepository.GetAsync(Id);
            if (Product == null)
            {
                ErrorMessage = "Product not found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while loading the product: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

   

    private async Task AddOrderItem(Product product, string selectedSize)
    {


        if (string.IsNullOrEmpty(selectedSize))
        {
            _JS?.ToastrError("Please select a size before adding to the cart.");
            return;
        }
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity == null || !user.Identity.IsAuthenticated)
        {
            // Redirect unauthenticated users to login page
            NavigationManager.NavigateTo("/Account/Login", true);
            return;
        }

        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            _JS?.ToastrError("Unable to identify user.");
            return;
        }

        var result = await _cartRepository.UpdateCartAsync(userId, product.Id, 1, selectedSize);
        _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCountAsync(userId);
        if (result)
        {
            _JS?.ToastrSuccess("Product Added to Cart Successfully");
        }
        else
        {
            _JS?.ToastrError("Error encountered.");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}
