@page "/size-calculator/{productId:int}"
@using PresizelyWeb.Data
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager

<div class="size-calculator-container d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-lg" style="width: 400px; border-radius: 15px;">
        <div class="card-header bg-primary text-white text-center" style="border-top-left-radius: 15px; border-top-right-radius: 15px;">
            <h4>Size Calculator</h4>
        </div>
        <div class="card-body">
            @if (_isProcessing)
            {
                <div class="text-center">
                    <p>Calculating size, please wait...</p>
                </div>
            }
            else
            {
                <EditForm Model="@_sizeCalculator" OnValidSubmit="CalculateSize">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="Height" class="form-label">Height (cm):</label>
                        <InputNumber id="Height" @bind-Value="_sizeCalculator.Height" class="form-control" />
                        <ValidationMessage For="@(() => _sizeCalculator.Height)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="Weight" class="form-label">Weight (kg):</label>
                        <InputNumber id="Weight" @bind-Value="_sizeCalculator.Weight" class="form-control" />
                        <ValidationMessage For="@(() => _sizeCalculator.Weight)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="Bust" class="form-label">Bust (cm):</label>
                        <InputNumber id="Bust" @bind-Value="_sizeCalculator.Bust" class="form-control" />
                        <ValidationMessage For="@(() => _sizeCalculator.Bust)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="Waist" class="form-label">Waist (cm):</label>
                        <InputNumber id="Waist" @bind-Value="_sizeCalculator.Waist" class="form-control" />
                        <ValidationMessage For="@(() => _sizeCalculator.Waist)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="SleeveLength" class="form-label">Sleeve Length (cm):</label>
                        <InputNumber id="SleeveLength" @bind-Value="_sizeCalculator.SleeveLength" class="form-control" />
                        <ValidationMessage For="@(() => _sizeCalculator.SleeveLength)" class="text-danger" />
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary px-4">Calculate</button>
                        <button type="button" class="btn btn-secondary px-4 ms-2" @onclick="NavigateBack">Back</button>
                    </div>
                </EditForm>
            }

            @if (!string.IsNullOrEmpty(_sizeCalculator.RecommendedSize))
            {
                <div class="alert alert-success text-center mt-3">
                    <strong>Recommended Size:</strong> @_sizeCalculator.RecommendedSize
                </div>
            }

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger text-center mt-3">
                    @_errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private SizeCalculator _sizeCalculator = new SizeCalculator();
    private bool _isProcessing = false;
    private string _errorMessage = string.Empty;

    [Parameter]
    public int ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var product = await _productRepository.GetAsync(ProductId);

            if (product == null)
            {
                _navigationManager.NavigateTo("/error"); // Redirect if product not found
                return;
            }

            _sizeCalculator.RecommendedSize = string.Empty;
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task CalculateSize()
    {
        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var product = await _productRepository.GetAsync(ProductId);

            if (product != null && !string.IsNullOrEmpty(product.SizeChartJson))
            {
                _sizeCalculator.RecommendedSize = _sizeCalculator.MatchSize(product.SizeChartJson, product.IsTop);
            }
            else
            {
                _errorMessage = "Size chart not available for this product.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred during size calculation: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void NavigateBack()
    {
        _navigationManager.NavigateTo("/products");
    }
}
