@page "/products"
@using System.Globalization
@using PresizelyWeb.Services
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@inject IShoppingCartRepository _cartRepository
@inject SharedStateService _sharedStateService


<div class="products-page">
    <h3 class="text-center my-4">Our Garments</h3>

    @if (IsProcessing)
    {
        <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/lib/images/loading.gif" alt="loading" />
        </div>
    }
    else if (Product != null && Product.Any())
    {
        <div class="row mt-4 mx-1">
            <!-- Categories and Search -->
            <div class="col-12 d-flex justify-content-between align-items-center mb-3">
                <!-- Categories -->
                <ul class="nav nav-underline">
                    <li class="nav-item">
                        <span class="nav-link @GetActiveTabClass(0)" @onclick="() => FilterProducts(0)" style="cursor: pointer">All</span>
                    </li>

                    @foreach (var category in Categories)
                    {
                        <li class="nav-item">
                            <span class="nav-link @GetActiveTabClass(category.Id)" @onclick="() => FilterProducts(category.Id)" style="cursor: pointer">
                                @category.Name
                            </span>
                        </li>
                    }
                </ul>

                <!-- Search Box -->
                <div style="max-width: 300px;" class="d-flex align-items-center">
                    <input type="text" class="form-control rounded-pill me-2" 
                    placeholder="Search products..." 
                    @oninput="e => FilterProductByName(e.Value.ToString())" />
                    <i class="bi bi-search text-secondary"></i>
                </div>
            </div>


            @foreach (var prod in FilteredProducts)
            {
                <div class="col-12 col-md-6 col-lg-6 mb-4">

                    <div class="card h-100 d-flex flex-column">
                        <div class="card-header d-flex justify-content-between align-items-center">

                            @if (!string.IsNullOrEmpty(prod.SpecialTag))
                            {
                                <i class="bi bi-star btn btn-outline-success disabled"> @prod.SpecialTag</i>
                            }

                            <div class="col-6 text-end text-danger px-3 h3">
                                @prod.Price.ToString("C", CultureInfo.GetCultureInfo("en-GB"))
                            </div>
                        </div>
                        <div class="text-center">
                            @if (!string.IsNullOrEmpty(prod.ImageUrl))
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@prod.ImageUrl" style="">
                            }
                            else
                            {
                                <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">
                            }
                        </div>
                        <!-- Description -->
                        <p class="card-text mt-2">@((MarkupString)prod.Description)</p>

                        <!-- Dropdown and Size Calculator Aligned -->
                        <div class="d-flex justify-content-start align-items-center gap-3">
                            <label for="sizeDropdown-@prod.Id" class="form-label mb-0">Available Sizes:</label>
                            <select id="sizeDropdown-@prod.Id" class="form-select w-auto" @bind="selectedSize">
                                <option value="" disabled selected>Select a size</option> <!-- Placeholder option -->
                                @foreach (var size in prod.Size.Split(','))
                                {
                                    <option value="@size">@size</option>
                                }
                            </select>
                            <a class="btn btn-info px-3" href="/size-calculator/@prod.Id">
                                <i class="bi bi-calculator"></i> Size Calculator
                            </a>
                        </div>

                        

                        <!-- Add to Cart Button -->
                        <h4 class="text-center mt-3">
                            <button class="btn btn-success text-right px-5" @onclick="()=>AddOrderItem(prod, selectedSize)">
                                <i class="bi bi-cart3"></i> Add to cart
                            </button>
                        </h4>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center text-muted">No products available at the moment.</div>
    }
</div>

@code {
    private IEnumerable<Product> Product = new List<Product>();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Product> FilteredProducts = new List<Product>();
    private bool IsProcessing { get; set; } = true;
    private int _selectedCategoryId = 0;
    private string _searchText = "";
    private string selectedSize;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        try
        {
            Product = await _productRepository.GetAllAsync();
            Categories = await _categoryRepository.GetAllAsync();
            FilterProducts(0);
        }
        finally
        {
            IsProcessing = false;
        }
    }

    private void FilterProducts(int categoryId)
    {
        _selectedCategoryId = categoryId; // Update the selected category ID
        if (categoryId==0)
        {
            // Show all products
            FilteredProducts = string.IsNullOrWhiteSpace(_searchText)
                ? Product
                : Product.Where(u => u.Name.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        else
        {
            // Filter by category
            FilteredProducts = Product
                .Where(u => u.CategoryId == categoryId &&
                            (string.IsNullOrWhiteSpace(_searchText) || u.Name.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase)))
                .ToList();
        }
    }

    private void FilterProductByName(string newValueOfSearchText)
    {
        _searchText = newValueOfSearchText; // Update search text

        if (string.IsNullOrWhiteSpace(newValueOfSearchText))
        {
            // If search text is empty, filter by category only
            FilterProducts(_selectedCategoryId);
        }
        else
        {
            // Filter by both category and search text
            FilteredProducts = Product
                .Where(u => (u.CategoryId == _selectedCategoryId || _selectedCategoryId == 0) &&
                            u.Name.Contains(newValueOfSearchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }
    }

    private string GetActiveTabClass(int categoryId)
    {
        return categoryId == _selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product product, string selectedSize)
    {


        if (string.IsNullOrEmpty(selectedSize))
        {
            _JS?.ToastrError("Please select a size before adding to the cart.");
            return;
        }
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;

        if (!authenticated)
        {
            Console.WriteLine("Redirecting to: /Account/Login");
            _NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            _JS?.ToastrError("Unable to identify user.");
            return;
        }

        var result = await _cartRepository.UpdateCartAsync(userId, product.Id, 1, selectedSize);
        _sharedStateService.TotalCartCount = await _cartRepository.GetTotalCartCountAsync(userId);
        if (result)
        {
            _JS?.ToastrSuccess("Product Added to Cart Successfully");
        }
        else
        {
            _JS?.ToastrError("Error encountered.");
        }
    }

 
}
